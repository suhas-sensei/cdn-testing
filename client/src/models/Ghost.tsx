/*
Auto-generated by: https://github.com/pmndrs/gltfjsx (adapted to isolate instances)
Author: LostBoyz2078 (https://sketchfab.com/LostModels2025)
License: CC-BY-NC-4.0 (http://creativecommons.org/licenses/by-nc/4.0/)
Source: https://sketchfab.com/3d-models/ghost-daughter-89850ac12e0f468582d4d0dcebd4efbc
Title: Ghost Daughter
*/

import * as THREE from 'three'
import React, { useRef, useEffect, useMemo } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF, SkeletonUtils } from 'three-stdlib'

type GhostGLTF = GLTF

export function Ghost(props: JSX.IntrinsicElements['group']) {
  // Load once from cache
  const { scene, animations } = useGLTF('https://1jm5ohyvae1p5zsx.public.blob.vercel-storage.com/ghost.glb') as GhostGLTF

  // ⛑️ Per-instance deep clone (bones + meshes). No refs shared with others.
  const model = useMemo(() => SkeletonUtils.clone(scene) as THREE.Group, [scene])

  // One-time per-instance material localization + render flags
  useEffect(() => {
    model.traverse((o: any) => {
      if (o?.isMesh || o?.isSkinnedMesh) {
        o.frustumCulled = false

        // 🔒 Give this instance its own materials
        if (Array.isArray(o.material)) {
          o.material = o.material.map((m: any) =>
            m?.isMaterial && m.clone ? m.clone() : m
          )
        } else if (o.material?.isMaterial && o.material.clone) {
          o.material = o.material.clone()
        }

        // Friendly defaults for translucent ghost parts
        const mats = Array.isArray(o.material) ? o.material : [o.material]
        for (const m of mats) {
          if (!m) continue
          if ('transparent' in m) m.transparent = true
          if ('depthWrite' in m) m.depthWrite = false
          if ('side' in m) m.side = THREE.DoubleSide
        }
      }
    })
  }, [model])

  // Play the single clip
  const { actions } = useAnimations(animations, model)
  useEffect(() => {
    const a = actions['GltfAnimation 0']
    a?.reset().fadeIn(0.3).play()
    return () => { a?.fadeOut(0.2).stop() }
  }, [actions])

  // IMPORTANT: prevent R3F disposing children when this unmounts
  return (
    <primitive
      object={model}
      {...props}
      dispose={null}
      userData={{ isEntity: true }}
    />
  )
}

useGLTF.preload('https://1jm5ohyvae1p5zsx.public.blob.vercel-storage.com/ghost.glb')
